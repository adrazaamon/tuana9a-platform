### setup cluster role for controller
data "aws_iam_policy_document" "eks_cluster_role_trust_policy" {
  statement {
    effect = "Allow"
    actions = [
      "sts:AssumeRole"
    ]
    principals {
      type        = "Service"
      identifiers = ["eks.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "eks_cluster_role" {
  name               = "EKSClusterRole"
  assume_role_policy = data.aws_iam_policy_document.eks_cluster_role_trust_policy.json
}

resource "aws_iam_role_policy_attachment" "attach_policy_to_eks_cluster_role_1" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster_role.name
}

### setup role for the worker
data "aws_iam_policy_document" "eks_node_role_trust_policy" {
  statement {
    effect = "Allow"
    actions = [
      "sts:AssumeRole"
    ]
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "eks_auto_scaler" {
  name        = "EKSAutoScaler"
  path        = "/"
  description = "EKS cluster auto scaler"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DescribeTags",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeLaunchTemplateVersions"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "autoscaling:SetDesiredCapacity",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "ec2:DescribeImages",
          "ec2:GetInstanceTypesFromInstanceRequirements",
          "eks:DescribeNodegroup"
        ]
        Resource = "*"
      },
    ]
  })
}

resource "aws_iam_role" "eks_node_role" {
  name               = "EKSNodeRole"
  assume_role_policy = data.aws_iam_policy_document.eks_node_role_trust_policy.json
}

resource "aws_iam_role_policy_attachment" "attach_policy_to_eks_node_role_1" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "attach_policy_to_eks_node_role_2" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "attach_policy_to_eks_node_role_3" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_node_role.name
}

resource "aws_iam_role_policy_attachment" "attach_policy_to_eks_node_role_4" {
  policy_arn = aws_iam_policy.eks_auto_scaler.arn
  role       = aws_iam_role.eks_node_role.name
}

### init cluster
resource "aws_subnet" "eks_1" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]

  map_public_ip_on_launch = true

  tags = {
    Name = "eks_1"
  }
}

resource "aws_subnet" "eks_2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = data.aws_availability_zones.available.names[1]

  map_public_ip_on_launch = true

  tags = {
    Name = "eks_2"
  }
}

resource "aws_subnet" "eks_3" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = data.aws_availability_zones.available.names[2]

  map_public_ip_on_launch = true

  tags = {
    Name = "eks_3"
  }
}

resource "aws_eks_cluster" "cluster_1" {
  name     = "cluster_1"
  role_arn = aws_iam_role.eks_cluster_role.arn
  version  = "1.28"

  vpc_config {
    subnet_ids = [aws_subnet.eks_1.id, aws_subnet.eks_2.id, aws_subnet.eks_3.id]
  }

  # Ensure that IAM Role permissions are created before and deleted after EKS Cluster handling.
  # Otherwise, EKS will not be able to properly delete EKS managed EC2 infrastructure such as Security Groups.
  depends_on = [
    aws_iam_role_policy_attachment.attach_policy_to_eks_cluster_role_1,
  ]
}

resource "aws_eks_addon" "vpc_cni_1" {
  cluster_name = aws_eks_cluster.cluster_1.name
  addon_name   = "vpc-cni"
  configuration_values = jsonencode({
    env = {
      WARM_IP_TARGET : "3",
      MINIMUM_IP_TARGET : "3",
    }
  })
  resolve_conflicts_on_update = "PRESERVE"
}

resource "aws_eks_node_group" "group_1" {
  cluster_name    = aws_eks_cluster.cluster_1.name
  node_group_name = "group_1"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = [aws_subnet.eks_1.id, aws_subnet.eks_2.id, aws_subnet.eks_3.id]
  capacity_type   = "SPOT"

  scaling_config {
    desired_size = 1
    max_size     = 10
    min_size     = 0
  }

  update_config {
    max_unavailable = 1
  }

  # Ensure that IAM Role permissions are created before and deleted after EKS Node Group handling.
  # Otherwise, EKS will not be able to properly delete EC2 Instances and Elastic Network Interfaces.
  depends_on = [
    aws_iam_role_policy_attachment.attach_policy_to_eks_node_role_1,
    aws_iam_role_policy_attachment.attach_policy_to_eks_node_role_2,
    aws_iam_role_policy_attachment.attach_policy_to_eks_node_role_3,
    aws_iam_role_policy_attachment.attach_policy_to_eks_node_role_4,
  ]
}

output "eks-cluster-name" {
  value = aws_eks_cluster.cluster_1.name
}

output "eks-endpoint" {
  value = aws_eks_cluster.cluster_1.endpoint
}

output "eks-cluster-version" {
  value = aws_eks_cluster.cluster_1.version
}

output "eks-node-group-version" {
  value = aws_eks_node_group.group_1.version
}

output "eks-vpc-cni-config" {
  value = jsondecode(aws_eks_addon.vpc_cni_1.configuration_values)
}

output "eks-update-kubeconfig-command" {
  value = "aws eks update-kubeconfig --name ${aws_eks_cluster.cluster_1.name}"
}

resource "local_file" "private_key" {
  content  = templatefile("cluster-autoscaler-autodiscover.yaml.tftpl", { cluster_name = aws_eks_cluster.cluster_1.name })
  filename = "cluster-autoscaler-autodiscover.yaml"
}
